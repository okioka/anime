{"version":3,"file":"static/webpack/static/development/pages/index.js.b2f61c7cf6bc95968323.hot-update.js","sources":["webpack:///./components/App.js"],"sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport css from '../public/styles.scss'\n\n// ページ全体\nexport default class Anime extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      anime: [],\n      coursList: [],\n      checked: false\n    }\n    this.check = this.check.bind(this)\n    this.animeSearch = this.animeSearch.bind(this)\n    this.getNowCours = this.getNowCours.bind(this)\n  }\n\n  componentDidMount() {\n    // 現在放送中のデータを最初に表示する\n    this.animeSearch(this.getNowCours())\n    this.setDateList()\n  }\n\n  // アニメ検索\n  // coursはYYYY/Xの形式で渡される\n  animeSearch(cours) {\n    const url = \"https://api.moemoe.tokyo/anime/v1/master/\"+ cours + \"?ogp=1\"\n    axios.get(url).then(res => { \n      this.setState({anime: res.data})\n\n      // 聖地のみなら0件チェック\n      // 絞り込みが無い状態は0件がありえないので実装しない\n      if(this.state.checked) {\n        this.cityEnptyCheck(res.data)\n      }\n    }).catch(error => {\n      alert(\"データの表示ができません\")\n      console.log(\"データ表示NG\")\n      console.log(error)\n    }) \n  }\n\n  // 聖地のみ絞りこむチェックボックスの状態を変更する\n  check() {\n    if(this.state.checked) {\n      this.setState({checked: false})\n    } else {\n      this.setState({checked: true})\n      this.cityEnptyCheck(this.state.anime)\n    }\n  }\n\n  // 聖地データが0件かチェック\n  cityEnptyCheck(data) {\n    const isCityEmpty = data.every((anime) => {\n      return(\n        anime.city_name === \"\"\n      )\n    })\n    if(isCityEmpty) {\n      alert(\"データは0件です\")\n    }\n  }\n\n  // 月から放送クールを求める\n  getCours(month) {\n    if(month <= 3) {\n      return 1\n    } else if(month <= 6) {\n      return 2\n    } else if(month <= 9) {\n      return 3\n    } else if(month <= 12) {\n      return 4\n    }\n  }\n\n  // 放送クールから季節を求める\n  getSeason(cours) {\n    if(cours === 1){\n      return '冬'\n    } else if(cours === 2) {\n      return '春'\n    } else if(cours === 3) {\n      return '夏'\n    } else if(cours === 4) {\n      return '秋'\n    }\n  }\n\n  // 現在放送中の放送クールをYYYY/Xの形式で求める\n  getNowCours() {\n    const date = new Date()\n    const year = date.getFullYear()\n    const month = date.getMonth() + 1\n    const now = year + '/' + this.getCours(month) \n    return now\n  }\n\n  // 検索フォームに表示するリストボックス用の値を設定する。\n  // 2014年冬から放送中の放送クールまで\n  setDateList() {\n    const date = new Date()\n    const year = date.getFullYear()\n    const month = date.getMonth() + 1\n    const cours = this.getCours(month)\n    let coursList = []\n\n    for(var i = year; i >= 2014; i--) {\n      if(i === year) {\n        for(var j = cours; j >= 1; j--) {\n          const cours = i + '/' + j\n          const season = i + '年 ' + this.getSeason(j)\n          coursList.push({season: season, cours: cours})\n        } \n      } else {\n        for(var j = 4; j >= 1; j--) {\n          const cours = i + '/' + j\n          const season = i + '年 ' + this.getSeason(j)\n          coursList.push({season: season, cours: cours})\n        } \n      }\n    }\n    this.setState({coursList: coursList})\n  }\n\n  render() {\n    return (\n      <div>\n        <div className={css.header}>\n          <Header />\n          <AnimeForm search={(cours) => this.animeSearch(cours)} check={this.check} coursList={this.state.coursList} now={this.getNowCours}/>\n        </div>\n        <AnimeList anime={this.state.anime} checked={this.state.checked} />\n      </div>\n    )\n  }\n}\n\n// ヘッダー部\nclass Header extends React.Component {\n  render() {\n    return (\n      <h1>\n        アニメ検索\n      </h1>\n    );\n  }\n}\n\n// 検索フォーム\nclass AnimeForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cours: \"\"\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  // リストボックスを変更せずに検索ボタンをクリックすると\n  // 404エラーになってしまう\n  // ここで現在放送中の放送クールを初期値として設定\n  componentDidMount() {\n    const now = this.props.now()\n    this.setState({cours: now})\n  }\n\n  // リストボックスクリック時に呼ばれる\n  handleChange(e) {\n    this.setState({[e.target.name]: e.target.value})\n  }\n\n  render() {\n    // リストボックス内のデータ\n    const coursNodes = this.props.coursList.map((list, index) => { \n      return(\n        <option key={index} value={list.cours}>{list.season}</option>\n      )\n    })\n    return (\n      <div className={css.form}>\n        <div className={css.move}>\n          <select name=\"cours\" onChange={this.handleChange}>\n            {coursNodes}\n          </select>\n        </div>\n        <button className={css.btn} onClick={() => this.props.search(this.state.cours)}>検索</button>\n        <input type=\"checkbox\" id=\"city_chk\" onClick={this.props.check} onLoad={this.props.check}/>\n        <label htmlFor=\"city_chk\">聖地があるアニメのみ</label>\n      </div>\n    )\n  }\n}\n\nclass AnimeList extends React.Component {\n  render() {\n    // アニメデータ\n    const animeNodes = this.props.anime.map((anime) => { \n      // 聖地のみ出力するか判定する部分  \n      if(this.props.checked) {\n        if(`${anime.city_name}`) { \n          return(\n            <AnimeData key={anime.id} title={anime.title} url={anime.public_url} img={anime.ogp.og_image} city={anime.city_name} twitter={anime.twitter_account}></AnimeData>\n          )\n        }\n      } else {\n        return(\n          <AnimeData key={anime.id} title={anime.title} url={anime.public_url} img={anime.ogp.og_image} city={anime.city_name} twitter={anime.twitter_account}></AnimeData>\n        )\n      }  \n    })\n\n    return (\n      <div className={css.tile}>\n        {animeNodes}\n      </div>\n    )\n  }\n}\n\nclass AnimeData extends React.Component {\n  render() {\n    // 作品タイトル+聖地名でGoogle検索するURL\n    const searchURL  = `https://www.google.com/search?q=${this.props.title}+${this.props.city}`\n    // 公式TwitterアカウントのURL\n    const twitterURL = `https://twitter.com/${this.props.twitter}`\n\n    // 聖地が無ければ聖地データは入れない\n    let   city       = `${this.props.city}`.replace(/\\|/g, '')\n    \n    // 聖地にパイプが入っていることがるので除去する\n    city = city.replace('|', '')\n\n    if(city === \"\") {\n      city = \"\"\n    } else {\n      city = \"聖地 : \" + city\n    }\n\n    // 画像のURLはテスト用\n    return (\n      <div className={css.card}>\n        <div className={css.card_imgframe + ' ' + css.box_1x1}>\n          <a href={this.props.url} target=\"_blank\">\n            <img className={css.card_img} src={this.props.img} onError={(e) => e.target.src = 'http://design-ec.com/d/e_others_50/m_e_others_500.png'}/>\n          </a>\n        </div>\n        <div className={css.card_textbox}>\n          <a href={searchURL} target=\"_blank\">\n            <div className={css.card_titletext}>\n              {this.props.title}\n            </div>\n            <div className={css.card_overviewtext}>\n              {city}\n            </div>\n          </a>\n          <a href={twitterURL} target=\"_blank\">\n            <div className={css.card_overviewtext}>\n              twitter : @{this.props.twitter}\n            </div>\n          </a>\n        </div>\n      </div>\n    );\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AATA;AAUA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AApIA;AACA;AACA;AAFA;AACA;AAuIA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAPA;AACA;AACA;AASA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAGA;AALA;AAMA;AAGA;AACA;AACA;AACA;;;AADA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAzCA;AACA;AA2CA;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAvBA;AACA;AAyBA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AA5CA;;;;A","sourceRoot":""}