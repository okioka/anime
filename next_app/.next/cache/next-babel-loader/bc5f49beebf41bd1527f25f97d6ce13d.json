{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport axios from 'axios';\nimport css from '../public/styles.scss'; // ページ全体\n\nexport default class Anime extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      anime: [],\n      coursList: [],\n      checked: false\n    };\n    this.check = this.check.bind(this);\n    this.animeSearch = this.animeSearch.bind(this);\n    this.getNowCours = this.getNowCours.bind(this);\n  }\n\n  componentDidMount() {\n    // 現在放送中のデータを最初に表示する\n    this.animeSearch(this.getNowCours());\n    this.setDateList();\n  } // アニメ検索\n  // coursはYYYY/Xの形式で渡される\n\n\n  animeSearch(cours) {\n    const url = \"http://api.moemoe.tokyo/anime/v1/master/\" + cours + \"?ogp=1\";\n    axios.get(url).then(res => {\n      this.setState({\n        anime: res.data\n      }); // 聖地のみなら0件チェック\n      // 絞り込みが無い状態は0件がありえないので実装しない\n\n      if (this.state.checked) {\n        this.cityEnptyCheck(res.data);\n      }\n    }).catch(error => {\n      alert(\"データの表示ができません\");\n      console.log(\"データ表示NG\");\n      console.log(error);\n    });\n  } // 聖地のみ絞りこむチェックボックスの状態を変更する\n\n\n  check() {\n    if (this.state.checked) {\n      this.setState({\n        checked: false\n      });\n    } else {\n      this.setState({\n        checked: true\n      });\n      this.cityEnptyCheck(this.state.anime);\n    }\n  } // 聖地データが0件かチェック\n\n\n  cityEnptyCheck(data) {\n    const isCityEmpty = data.every(anime => {\n      return anime.city_name === \"\";\n    });\n\n    if (isCityEmpty) {\n      alert(\"データは0件です\");\n    }\n  } // 月から放送クールを求める\n\n\n  getCours(month) {\n    if (month <= 3) {\n      return 1;\n    } else if (month <= 6) {\n      return 2;\n    } else if (month <= 9) {\n      return 3;\n    } else if (month <= 12) {\n      return 4;\n    }\n  } // 放送クールから季節を求める\n\n\n  getSeason(cours) {\n    if (cours === 1) {\n      return '冬';\n    } else if (cours === 2) {\n      return '春';\n    } else if (cours === 3) {\n      return '夏';\n    } else if (cours === 4) {\n      return '秋';\n    }\n  } // 現在放送中の放送クールをYYYY/Xの形式で求める\n\n\n  getNowCours() {\n    const date = new Date();\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const now = year + '/' + this.getCours(month);\n    return now;\n  } // 検索フォームに表示するリストボックス用の値を設定する。\n  // 2014年冬から放送中の放送クールまで\n\n\n  setDateList() {\n    const date = new Date();\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const cours = this.getCours(month);\n    let coursList = [];\n\n    for (var i = year; i >= 2014; i--) {\n      if (i === year) {\n        for (var j = cours; j >= 1; j--) {\n          const cours = i + '/' + j;\n          const season = i + '年 ' + this.getSeason(j);\n          coursList.push({\n            season: season,\n            cours: cours\n          });\n        }\n      } else {\n        for (var j = 4; j >= 1; j--) {\n          const cours = i + '/' + j;\n          const season = i + '年 ' + this.getSeason(j);\n          coursList.push({\n            season: season,\n            cours: cours\n          });\n        }\n      }\n    }\n\n    this.setState({\n      coursList: coursList\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"div\", {\n      className: css.header\n    }, __jsx(Header, null), __jsx(AnimeForm, {\n      search: cours => this.animeSearch(cours),\n      check: this.check,\n      coursList: this.state.coursList,\n      now: this.getNowCours\n    })), __jsx(AnimeList, {\n      anime: this.state.anime,\n      checked: this.state.checked\n    }));\n  }\n\n} // ヘッダー部\n\nclass Header extends React.Component {\n  render() {\n    return __jsx(\"h1\", null, \"\\u30A2\\u30CB\\u30E1\\u691C\\u7D22\");\n  }\n\n} // 検索フォーム\n\n\nclass AnimeForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cours: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n  } // リストボックスを変更せずに検索ボタンをクリックすると\n  // 404エラーになってしまう\n  // ここで現在放送中の放送クールを初期値として設定\n\n\n  componentDidMount() {\n    const now = this.props.now();\n    this.setState({\n      cours: now\n    });\n  } // リストボックスクリック時に呼ばれる\n\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  render() {\n    // リストボックス内のデータ\n    const coursNodes = this.props.coursList.map(list => {\n      return __jsx(\"option\", {\n        value: list.cours\n      }, list.season);\n    });\n    return __jsx(\"div\", {\n      className: css.form\n    }, __jsx(\"div\", {\n      className: css.move\n    }, __jsx(\"select\", {\n      name: \"cours\",\n      onChange: this.handleChange\n    }, coursNodes)), __jsx(\"button\", {\n      className: css.btn,\n      onClick: () => this.props.search(this.state.cours)\n    }, \"\\u691C\\u7D22\"), __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"city_chk\",\n      onClick: this.props.check,\n      onLoad: this.props.check\n    }), __jsx(\"label\", {\n      htmlFor: \"city_chk\"\n    }, \"\\u8056\\u5730\\u304C\\u3042\\u308B\\u30A2\\u30CB\\u30E1\\u306E\\u307F\"));\n  }\n\n}\n\nclass AnimeList extends React.Component {\n  render() {\n    // アニメデータ\n    const animeNodes = this.props.anime.map(anime => {\n      // 聖地のみ出力するか判定する部分  \n      if (this.props.checked) {\n        if (`${anime.city_name}`) {\n          return __jsx(AnimeData, {\n            key: anime.id,\n            title: anime.title,\n            url: anime.public_url,\n            img: anime.ogp.og_image,\n            city: anime.city_name,\n            twitter: anime.twitter_account\n          });\n        }\n      } else {\n        return __jsx(AnimeData, {\n          key: anime.id,\n          title: anime.title,\n          url: anime.public_url,\n          img: anime.ogp.og_image,\n          city: anime.city_name,\n          twitter: anime.twitter_account\n        });\n      }\n    });\n    return __jsx(\"div\", {\n      className: css.tile\n    }, animeNodes);\n  }\n\n}\n\nclass AnimeData extends React.Component {\n  render() {\n    // 作品タイトル+聖地名でGoogle検索するURL\n    const searchURL = `https://www.google.com/search?q=${this.props.title}+${this.props.city}`; // 公式TwitterアカウントのURL\n\n    const twitterURL = `https://twitter.com/${this.props.twitter}`; // 聖地が無ければ聖地データは入れない\n\n    let city = `${this.props.city}`.replace(/\\|/g, '');\n\n    if (city === \"\") {\n      city = \"\";\n    } else {\n      city = \"聖地 : \" + city;\n    } // 画像のURLはテスト用\n\n\n    return __jsx(\"div\", {\n      className: css.card\n    }, __jsx(\"div\", {\n      className: css.card_imgframe + ' ' + css.box_1x1\n    }, __jsx(\"a\", {\n      href: this.props.url,\n      target: \"_blank\"\n    }, __jsx(\"img\", {\n      className: css.card_img,\n      src: this.props.img,\n      onError: e => e.target.src = 'http://design-ec.com/d/e_others_50/m_e_others_500.png'\n    }))), __jsx(\"div\", {\n      className: css.card_textbox\n    }, __jsx(\"a\", {\n      href: searchURL,\n      target: \"_blank\"\n    }, __jsx(\"div\", {\n      className: css.card_titletext\n    }, this.props.title), __jsx(\"div\", {\n      className: css.card_overviewtext\n    }, city)), __jsx(\"a\", {\n      href: twitterURL,\n      target: \"_blank\"\n    }, __jsx(\"div\", {\n      className: css.card_overviewtext\n    }, \"twitter : @\", this.props.twitter))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}