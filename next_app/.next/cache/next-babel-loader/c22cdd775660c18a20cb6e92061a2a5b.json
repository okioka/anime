{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport axios from 'axios';\nimport css from '../public/styles.scss'; // ページ全体\n\nvar Anime = /*#__PURE__*/function (_React$Component) {\n  _inherits(Anime, _React$Component);\n\n  var _super = _createSuper(Anime);\n\n  function Anime(props) {\n    var _this;\n\n    _classCallCheck(this, Anime);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      anime: [],\n      coursList: [],\n      checked: false\n    };\n    _this.check = _this.check.bind(_assertThisInitialized(_this));\n    _this.animeSearch = _this.animeSearch.bind(_assertThisInitialized(_this));\n    _this.getNowCours = _this.getNowCours.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Anime, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // 現在放送中のデータを最初に表示する\n      this.animeSearch(this.getNowCours());\n      this.setDateList();\n    } // アニメ検索\n    // coursはYYYY/Xの形式で渡される\n\n  }, {\n    key: \"animeSearch\",\n    value: function animeSearch(cours) {\n      var _this2 = this;\n\n      var url = \"http://api.moemoe.tokyo/anime/v1/master/\" + cours + \"?ogp=1\";\n      axios.get(url).then(function (res) {\n        _this2.setState({\n          anime: res.data\n        }); // 聖地のみなら0件チェック\n        // 絞り込みが無い状態は0件がありえないので実装しない\n\n\n        if (_this2.state.checked) {\n          _this2.cityEnptyCheck(res.data);\n        }\n      })[\"catch\"](function (error) {\n        alert(\"データの表示ができません\");\n        console.log(\"データ表示NG\");\n        console.log(error);\n      });\n    } // 聖地のみ絞りこむチェックボックスの状態を変更する\n\n  }, {\n    key: \"check\",\n    value: function check() {\n      if (this.state.checked) {\n        this.setState({\n          checked: false\n        });\n      } else {\n        this.setState({\n          checked: true\n        });\n        this.cityEnptyCheck(this.state.anime);\n      }\n    } // 聖地データが0件かチェック\n\n  }, {\n    key: \"cityEnptyCheck\",\n    value: function cityEnptyCheck(data) {\n      var isCityEmpty = data.every(function (anime) {\n        return anime.city_name === \"\";\n      });\n\n      if (isCityEmpty) {\n        alert(\"データは0件です\");\n      }\n    } // 月から放送クールを求める\n\n  }, {\n    key: \"getCours\",\n    value: function getCours(month) {\n      if (month <= 3) {\n        return 1;\n      } else if (month <= 6) {\n        return 2;\n      } else if (month <= 9) {\n        return 3;\n      } else if (month <= 12) {\n        return 4;\n      }\n    } // 放送クールから季節を求める\n\n  }, {\n    key: \"getSeason\",\n    value: function getSeason(cours) {\n      if (cours === 1) {\n        return '冬';\n      } else if (cours === 2) {\n        return '春';\n      } else if (cours === 3) {\n        return '夏';\n      } else if (cours === 4) {\n        return '秋';\n      }\n    } // 現在放送中の放送クールをYYYY/Xの形式で求める\n\n  }, {\n    key: \"getNowCours\",\n    value: function getNowCours() {\n      var date = new Date();\n      var year = date.getFullYear();\n      var month = date.getMonth() + 1;\n      var now = year + '/' + this.getCours(month);\n      return now;\n    } // 検索フォームに表示するリストボックス用の値を設定する。\n    // 2014年冬から放送中の放送クールまで\n\n  }, {\n    key: \"setDateList\",\n    value: function setDateList() {\n      var date = new Date();\n      var year = date.getFullYear();\n      var month = date.getMonth() + 1;\n      var cours = this.getCours(month);\n      var coursList = [];\n\n      for (var i = year; i >= 2014; i--) {\n        if (i === year) {\n          for (var j = cours; j >= 1; j--) {\n            var _cours = i + '/' + j;\n\n            var season = i + '年 ' + this.getSeason(j);\n            coursList.push({\n              season: season,\n              cours: _cours\n            });\n          }\n        } else {\n          for (var j = 4; j >= 1; j--) {\n            var _cours2 = i + '/' + j;\n\n            var _season = i + '年 ' + this.getSeason(j);\n\n            coursList.push({\n              season: _season,\n              cours: _cours2\n            });\n          }\n        }\n      }\n\n      this.setState({\n        coursList: coursList\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return __jsx(\"div\", null, __jsx(\"div\", {\n        className: css.header\n      }, __jsx(Header, null), __jsx(AnimeForm, {\n        search: function search(cours) {\n          return _this3.animeSearch(cours);\n        },\n        check: this.check,\n        coursList: this.state.coursList,\n        now: this.getNowCours\n      })), __jsx(AnimeList, {\n        anime: this.state.anime,\n        checked: this.state.checked\n      }));\n    }\n  }]);\n\n  return Anime;\n}(React.Component); // ヘッダー部\n\n\nexport { Anime as default };\n\nvar Header = /*#__PURE__*/function (_React$Component2) {\n  _inherits(Header, _React$Component2);\n\n  var _super2 = _createSuper(Header);\n\n  function Header() {\n    _classCallCheck(this, Header);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(Header, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"h1\", null, \"\\u30A2\\u30CB\\u30E1\\u691C\\u7D22\");\n    }\n  }]);\n\n  return Header;\n}(React.Component); // 検索フォーム\n\n\nvar AnimeForm = /*#__PURE__*/function (_React$Component3) {\n  _inherits(AnimeForm, _React$Component3);\n\n  var _super3 = _createSuper(AnimeForm);\n\n  function AnimeForm(props) {\n    var _this4;\n\n    _classCallCheck(this, AnimeForm);\n\n    _this4 = _super3.call(this, props);\n    _this4.state = {\n      cours: \"\"\n    };\n    _this4.handleChange = _this4.handleChange.bind(_assertThisInitialized(_this4));\n    return _this4;\n  } // リストボックスを変更せずに検索ボタンをクリックすると\n  // 404エラーになってしまう\n  // ここで現在放送中の放送クールを初期値として設定\n\n\n  _createClass(AnimeForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var now = this.props.now();\n      this.setState({\n        cours: now\n      });\n    } // リストボックスクリック時に呼ばれる\n\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      this.setState(_defineProperty({}, e.target.name, e.target.value));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      // リストボックス内のデータ\n      var coursNodes = this.props.coursList.map(function (list) {\n        return __jsx(\"option\", {\n          value: list.cours\n        }, list.season);\n      });\n      return __jsx(\"div\", {\n        className: css.form\n      }, __jsx(\"div\", {\n        className: css.move\n      }, __jsx(\"select\", {\n        name: \"cours\",\n        onChange: this.handleChange\n      }, coursNodes)), __jsx(\"button\", {\n        className: css.btn,\n        onClick: function onClick() {\n          return _this5.props.search(_this5.state.cours);\n        }\n      }, \"\\u691C\\u7D22\"), __jsx(\"input\", {\n        type: \"checkbox\",\n        id: \"city_chk\",\n        onClick: this.props.check,\n        onLoad: this.props.check\n      }), __jsx(\"label\", {\n        htmlFor: \"city_chk\"\n      }, \"\\u8056\\u5730\\u304C\\u3042\\u308B\\u30A2\\u30CB\\u30E1\\u306E\\u307F\"));\n    }\n  }]);\n\n  return AnimeForm;\n}(React.Component);\n\nvar AnimeList = /*#__PURE__*/function (_React$Component4) {\n  _inherits(AnimeList, _React$Component4);\n\n  var _super4 = _createSuper(AnimeList);\n\n  function AnimeList() {\n    _classCallCheck(this, AnimeList);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(AnimeList, [{\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      // アニメデータ\n      var animeNodes = this.props.anime.map(function (anime) {\n        // 聖地のみ出力するか判定する部分  \n        if (_this6.props.checked) {\n          if (\"\".concat(anime.city_name)) {\n            return __jsx(AnimeData, {\n              key: anime.id,\n              title: anime.title,\n              url: anime.public_url,\n              img: anime.ogp.og_image,\n              city: anime.city_name,\n              twitter: anime.twitter_account\n            });\n          }\n        } else {\n          return __jsx(AnimeData, {\n            key: anime.id,\n            title: anime.title,\n            url: anime.public_url,\n            img: anime.ogp.og_image,\n            city: anime.city_name,\n            twitter: anime.twitter_account\n          });\n        }\n      });\n      return __jsx(\"div\", {\n        className: css.tile\n      }, animeNodes);\n    }\n  }]);\n\n  return AnimeList;\n}(React.Component);\n\nvar AnimeData = /*#__PURE__*/function (_React$Component5) {\n  _inherits(AnimeData, _React$Component5);\n\n  var _super5 = _createSuper(AnimeData);\n\n  function AnimeData() {\n    _classCallCheck(this, AnimeData);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(AnimeData, [{\n    key: \"render\",\n    value: function render() {\n      // 作品タイトル+聖地名でGoogle検索するURL\n      var searchURL = \"https://www.google.com/search?q=\".concat(this.props.title, \"+\").concat(this.props.city); // 公式TwitterアカウントのURL\n\n      var twitterURL = \"https://twitter.com/\".concat(this.props.twitter); // 聖地が無ければ聖地データは入れない\n\n      var city = \"\".concat(this.props.city).replace(/\\|/g, '');\n\n      if (city === \"\") {\n        city = \"\";\n      } else {\n        city = \"聖地 : \" + city;\n      } // 画像のURLはテスト用\n\n\n      return __jsx(\"div\", {\n        className: css.card\n      }, __jsx(\"div\", {\n        className: css.card_imgframe + ' ' + css.box_1x1\n      }, __jsx(\"a\", {\n        href: this.props.url,\n        target: \"_blank\"\n      }, __jsx(\"img\", {\n        className: css.card_img,\n        src: this.props.img,\n        onError: function onError(e) {\n          return e.target.src = 'http://design-ec.com/d/e_others_50/m_e_others_500.png';\n        }\n      }))), __jsx(\"div\", {\n        className: css.card_textbox\n      }, __jsx(\"a\", {\n        href: searchURL,\n        target: \"_blank\"\n      }, __jsx(\"div\", {\n        className: css.card_titletext\n      }, this.props.title), __jsx(\"div\", {\n        className: css.card_overviewtext\n      }, city)), __jsx(\"a\", {\n        href: twitterURL,\n        target: \"_blank\"\n      }, __jsx(\"div\", {\n        className: css.card_overviewtext\n      }, \"twitter : @\", this.props.twitter))));\n    }\n  }]);\n\n  return AnimeData;\n}(React.Component);","map":null,"metadata":{},"sourceType":"module"}