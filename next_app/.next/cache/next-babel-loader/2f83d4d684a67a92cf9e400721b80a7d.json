{"ast":null,"code":"var _jsxFileName = \"/Users/okioka/dev/anime/next_app/components/App.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport axios from 'axios';\nimport css from '../public/styles.scss'; // ページ全体\n\nexport default class Anime extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      anime: [],\n      coursList: [],\n      checked: false\n    };\n    this.check = this.check.bind(this);\n    this.animeSearch = this.animeSearch.bind(this);\n    this.getNowCours = this.getNowCours.bind(this);\n  }\n\n  componentDidMount() {\n    // 現在放送中のデータを最初に表示する\n    this.animeSearch(this.getNowCours());\n    this.setDateList();\n  } // アニメ検索\n  // coursはYYYY/Xの形式で渡される\n\n\n  animeSearch(cours) {\n    const url = \"http://api.moemoe.tokyo/anime/v1/master/\" + cours + \"?ogp=1\";\n    axios.get(url).then(res => {\n      this.setState({\n        anime: res.data\n      }); // 聖地のみなら0件チェック\n      // 絞り込みが無い状態は0件がありえないので実装しない\n\n      if (this.state.checked) {\n        this.cityEnptyCheck(res.data);\n      }\n    }).catch(error => {\n      alert(\"データの表示ができません\");\n      console.log(\"データ表示NG\");\n      console.log(error);\n    });\n  } // 聖地のみ絞りこむチェックボックスの状態を変更する\n\n\n  check() {\n    if (this.state.checked) {\n      this.setState({\n        checked: false\n      });\n    } else {\n      this.setState({\n        checked: true\n      });\n      this.cityEnptyCheck(this.state.anime);\n    }\n  } // 聖地データが0件かチェック\n\n\n  cityEnptyCheck(data) {\n    const isCityEmpty = data.every(anime => {\n      return anime.city_name === \"\";\n    });\n\n    if (isCityEmpty) {\n      alert(\"データは0件です\");\n    }\n  } // 月から放送クールを求める\n\n\n  getCours(month) {\n    if (month <= 3) {\n      return 1;\n    } else if (month <= 6) {\n      return 2;\n    } else if (month <= 9) {\n      return 3;\n    } else if (month <= 12) {\n      return 4;\n    }\n  } // 放送クールから季節を求める\n\n\n  getSeason(cours) {\n    if (cours === 1) {\n      return '冬';\n    } else if (cours === 2) {\n      return '春';\n    } else if (cours === 3) {\n      return '夏';\n    } else if (cours === 4) {\n      return '秋';\n    }\n  } // 現在放送中の放送クールをYYYY/Xの形式で求める\n\n\n  getNowCours() {\n    const date = new Date();\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const now = year + '/' + this.getCours(month);\n    return now;\n  } // 検索フォームに表示するリストボックス用の値を設定する。\n  // 2014年冬から放送中の放送クールまで\n\n\n  setDateList() {\n    const date = new Date();\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const cours = this.getCours(month);\n    let coursList = [];\n\n    for (var i = year; i >= 2014; i--) {\n      if (i === year) {\n        for (var j = cours; j >= 1; j--) {\n          const cours = i + '/' + j;\n          const season = i + '年 ' + this.getSeason(j);\n          coursList.push({\n            season: season,\n            cours: cours\n          });\n        }\n      } else {\n        for (var j = 4; j >= 1; j--) {\n          const cours = i + '/' + j;\n          const season = i + '年 ' + this.getSeason(j);\n          coursList.push({\n            season: season,\n            cours: cours\n          });\n        }\n      }\n    }\n\n    this.setState({\n      coursList: coursList\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: css.header,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, __jsx(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }), __jsx(AnimeForm, {\n      search: cours => this.animeSearch(cours),\n      check: this.check,\n      coursList: this.state.coursList,\n      now: this.getNowCours,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    })), __jsx(AnimeList, {\n      anime: this.state.anime,\n      checked: this.state.checked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }));\n  }\n\n} // ヘッダー部\n\nclass Header extends React.Component {\n  render() {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }\n    }, \"\\u30A2\\u30CB\\u30E1\\u691C\\u7D22\");\n  }\n\n} // 検索フォーム\n\n\nclass AnimeForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cours: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n  } // リストボックスを変更せずに検索ボタンをクリックすると\n  // 404エラーになってしまう\n  // ここで現在放送中の放送クールを初期値として設定\n\n\n  componentDidMount() {\n    const now = this.props.now();\n    this.setState({\n      cours: now\n    });\n  } // リストボックスクリック時に呼ばれる\n\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  render() {\n    // リストボックス内のデータ\n    const coursNodes = this.props.coursList.map(list => {\n      return __jsx(\"option\", {\n        value: list.cours,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 9\n        }\n      }, list.season);\n    });\n    return __jsx(\"div\", {\n      className: css.form,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: css.move,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }, __jsx(\"select\", {\n      name: \"cours\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }\n    }, coursNodes)), __jsx(\"button\", {\n      className: css.btn,\n      onClick: () => this.props.search(this.state.cours),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }\n    }, \"\\u691C\\u7D22\"), __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"city_chk\",\n      onClick: this.props.check,\n      onLoad: this.props.check,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }\n    }), __jsx(\"label\", {\n      htmlFor: \"city_chk\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }\n    }, \"\\u8056\\u5730\\u304C\\u3042\\u308B\\u30A2\\u30CB\\u30E1\\u306E\\u307F\"));\n  }\n\n}\n\nclass AnimeList extends React.Component {\n  render() {\n    // アニメデータ\n    const animeNodes = this.props.anime.map(anime => {\n      // 聖地のみ出力するか判定する部分  \n      if (this.props.checked) {\n        if (`${anime.city_name}`) {\n          return __jsx(AnimeData, {\n            key: anime.id,\n            title: anime.title,\n            url: anime.public_url,\n            img: anime.ogp.og_image,\n            city: anime.city_name,\n            twitter: anime.twitter_account,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 13\n            }\n          });\n        }\n      } else {\n        return __jsx(AnimeData, {\n          key: anime.id,\n          title: anime.title,\n          url: anime.public_url,\n          img: anime.ogp.og_image,\n          city: anime.city_name,\n          twitter: anime.twitter_account,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 11\n          }\n        });\n      }\n    });\n    return __jsx(\"div\", {\n      className: css.tile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }\n    }, animeNodes);\n  }\n\n}\n\nclass AnimeData extends React.Component {\n  render() {\n    // 作品タイトル+聖地名でGoogle検索するURL\n    const searchURL = `https://www.google.com/search?q=${this.props.title}+${this.props.city}`; // 公式TwitterアカウントのURL\n\n    const twitterURL = `https://twitter.com/${this.props.twitter}`; // 聖地が無ければ聖地データは入れない\n\n    let city = `${this.props.city}`.replace(/\\|/g, '');\n\n    if (city === \"\") {\n      city = \"\";\n    } else {\n      city = \"聖地 : \" + city;\n    } // 画像のURLはテスト用\n\n\n    return __jsx(\"div\", {\n      className: css.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: css.card_imgframe + ' ' + css.box_1x1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      href: this.props.url,\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }\n    }, __jsx(\"img\", {\n      className: css.card_img,\n      src: this.props.img,\n      onError: e => e.target.src = 'http://design-ec.com/d/e_others_50/m_e_others_500.png',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    }))), __jsx(\"div\", {\n      className: css.card_textbox,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      href: searchURL,\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: css.card_titletext,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }\n    }, this.props.title), __jsx(\"div\", {\n      className: css.card_overviewtext,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }\n    }, city)), __jsx(\"a\", {\n      href: twitterURL,\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: css.card_overviewtext,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }\n    }, \"twitter : @\", this.props.twitter))));\n  }\n\n}","map":{"version":3,"sources":["/Users/okioka/dev/anime/next_app/components/App.js"],"names":["React","axios","css","Anime","Component","constructor","props","state","anime","coursList","checked","check","bind","animeSearch","getNowCours","componentDidMount","setDateList","cours","url","get","then","res","setState","data","cityEnptyCheck","catch","error","alert","console","log","isCityEmpty","every","city_name","getCours","month","getSeason","date","Date","year","getFullYear","getMonth","now","i","j","season","push","render","header","Header","AnimeForm","handleChange","e","target","name","value","coursNodes","map","list","form","move","btn","search","AnimeList","animeNodes","id","title","public_url","ogp","og_image","twitter_account","tile","AnimeData","searchURL","city","twitterURL","twitter","replace","card","card_imgframe","box_1x1","card_img","img","src","card_textbox","card_titletext","card_overviewtext"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport css from '../public/styles.scss'\n\n// ページ全体\nexport default class Anime extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      anime: [],\n      coursList: [],\n      checked: false\n    }\n    this.check = this.check.bind(this)\n    this.animeSearch = this.animeSearch.bind(this)\n    this.getNowCours = this.getNowCours.bind(this)\n  }\n\n  componentDidMount() {\n    // 現在放送中のデータを最初に表示する\n    this.animeSearch(this.getNowCours())\n    this.setDateList()\n  }\n\n  // アニメ検索\n  // coursはYYYY/Xの形式で渡される\n  animeSearch(cours) {\n    const url = \"http://api.moemoe.tokyo/anime/v1/master/\"+ cours + \"?ogp=1\"\n    axios.get(url).then(res => { \n      this.setState({anime: res.data})\n\n      // 聖地のみなら0件チェック\n      // 絞り込みが無い状態は0件がありえないので実装しない\n      if(this.state.checked) {\n        this.cityEnptyCheck(res.data)\n      }\n    }).catch(error => {\n      alert(\"データの表示ができません\")\n      console.log(\"データ表示NG\")\n      console.log(error)\n    }) \n  }\n\n  // 聖地のみ絞りこむチェックボックスの状態を変更する\n  check() {\n    if(this.state.checked) {\n      this.setState({checked: false})\n    } else {\n      this.setState({checked: true})\n      this.cityEnptyCheck(this.state.anime)\n    }\n  }\n\n  // 聖地データが0件かチェック\n  cityEnptyCheck(data) {\n    const isCityEmpty = data.every((anime) => {\n      return(\n        anime.city_name === \"\"\n      )\n    })\n    if(isCityEmpty) {\n      alert(\"データは0件です\")\n    }\n  }\n\n  // 月から放送クールを求める\n  getCours(month) {\n    if(month <= 3) {\n      return 1\n    } else if(month <= 6) {\n      return 2\n    } else if(month <= 9) {\n      return 3\n    } else if(month <= 12) {\n      return 4\n    }\n  }\n\n  // 放送クールから季節を求める\n  getSeason(cours) {\n    if(cours === 1){\n      return '冬'\n    } else if(cours === 2) {\n      return '春'\n    } else if(cours === 3) {\n      return '夏'\n    } else if(cours === 4) {\n      return '秋'\n    }\n  }\n\n  // 現在放送中の放送クールをYYYY/Xの形式で求める\n  getNowCours() {\n    const date = new Date()\n    const year = date.getFullYear()\n    const month = date.getMonth() + 1\n    const now = year + '/' + this.getCours(month) \n    return now\n  }\n\n  // 検索フォームに表示するリストボックス用の値を設定する。\n  // 2014年冬から放送中の放送クールまで\n  setDateList() {\n    const date = new Date()\n    const year = date.getFullYear()\n    const month = date.getMonth() + 1\n    const cours = this.getCours(month)\n    let coursList = []\n\n    for(var i = year; i >= 2014; i--) {\n      if(i === year) {\n        for(var j = cours; j >= 1; j--) {\n          const cours = i + '/' + j\n          const season = i + '年 ' + this.getSeason(j)\n          coursList.push({season: season, cours: cours})\n        } \n      } else {\n        for(var j = 4; j >= 1; j--) {\n          const cours = i + '/' + j\n          const season = i + '年 ' + this.getSeason(j)\n          coursList.push({season: season, cours: cours})\n        } \n      }\n    }\n    this.setState({coursList: coursList})\n  }\n\n  render() {\n    return (\n      <div>\n        <div className={css.header}>\n          <Header />\n          <AnimeForm search={(cours) => this.animeSearch(cours)} check={this.check} coursList={this.state.coursList} now={this.getNowCours}/>\n        </div>\n        <AnimeList anime={this.state.anime} checked={this.state.checked} />\n      </div>\n    )\n  }\n}\n\n// ヘッダー部\nclass Header extends React.Component {\n  render() {\n    return (\n      <h1>\n        アニメ検索\n      </h1>\n    );\n  }\n}\n\n// 検索フォーム\nclass AnimeForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cours: \"\"\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  // リストボックスを変更せずに検索ボタンをクリックすると\n  // 404エラーになってしまう\n  // ここで現在放送中の放送クールを初期値として設定\n  componentDidMount() {\n    const now = this.props.now()\n    this.setState({cours: now})\n  }\n\n  // リストボックスクリック時に呼ばれる\n  handleChange(e) {\n    this.setState({[e.target.name]: e.target.value})\n  }\n\n  render() {\n    // リストボックス内のデータ\n    const coursNodes = this.props.coursList.map((list) => { \n      return(\n        <option value={list.cours}>{list.season}</option>\n      )\n    })\n    return (\n      <div className={css.form}>\n        <div className={css.move}>\n          <select name=\"cours\" onChange={this.handleChange}>\n            {coursNodes}\n          </select>\n        </div>\n        <button className={css.btn} onClick={() => this.props.search(this.state.cours)}>検索</button>\n        <input type=\"checkbox\" id=\"city_chk\" onClick={this.props.check} onLoad={this.props.check}/>\n        <label htmlFor=\"city_chk\">聖地があるアニメのみ</label>\n      </div>\n    )\n  }\n}\n\nclass AnimeList extends React.Component {\n  render() {\n    // アニメデータ\n    const animeNodes = this.props.anime.map((anime) => { \n      // 聖地のみ出力するか判定する部分  \n      if(this.props.checked) {\n        if(`${anime.city_name}`) { \n          return(\n            <AnimeData key={anime.id} title={anime.title} url={anime.public_url} img={anime.ogp.og_image} city={anime.city_name} twitter={anime.twitter_account}></AnimeData>\n          )\n        }\n      } else {\n        return(\n          <AnimeData key={anime.id} title={anime.title} url={anime.public_url} img={anime.ogp.og_image} city={anime.city_name} twitter={anime.twitter_account}></AnimeData>\n        )\n      }  \n    })\n\n    return (\n      <div className={css.tile}>\n        {animeNodes}\n      </div>\n    )\n  }\n}\n\nclass AnimeData extends React.Component {\n  render() {\n    // 作品タイトル+聖地名でGoogle検索するURL\n    const searchURL = `https://www.google.com/search?q=${this.props.title}+${this.props.city}`\n    // 公式TwitterアカウントのURL\n    const twitterURL = `https://twitter.com/${this.props.twitter}`\n\n    // 聖地が無ければ聖地データは入れない\n    let   city      = `${this.props.city}`.replace(/\\|/g, '')\n    if(city === \"\") {\n      city = \"\"\n    } else {\n      city = \"聖地 : \" + city\n    }\n\n    // 画像のURLはテスト用\n    return (\n      <div className={css.card}>\n        <div className={css.card_imgframe + ' ' + css.box_1x1}>\n          <a href={this.props.url} target=\"_blank\">\n            <img className={css.card_img} src={this.props.img} onError={(e) => e.target.src = 'http://design-ec.com/d/e_others_50/m_e_others_500.png'}/>\n          </a>\n        </div>\n        <div className={css.card_textbox}>\n          <a href={searchURL} target=\"_blank\">\n            <div className={css.card_titletext}>\n              {this.props.title}\n            </div>\n            <div className={css.card_overviewtext}>\n              {city}\n            </div>\n          </a>\n          <a href={twitterURL} target=\"_blank\">\n            <div className={css.card_overviewtext}>\n              twitter : @{this.props.twitter}\n            </div>\n          </a>\n        </div>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}